openapi: 3.0.3
info:
  version: 1.0.0
  title: POPAI API
servers:
  - url: 'https://localhost:3000/api'
paths:
  /auth/me:
    get:
      tags:
        - auth
      description: Get information about yourself.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    nullable: true
                    example: null
                  isRegistered:
                    type: boolean
                    example: true
      servers:
        - url: 'https://localhost:3000/api'
  /auth/login:
    get:
      tags:
        - auth
      responses:
        '200':
          description: successful operation
      servers:
        - url: 'https://localhost:3000/api'
  /auth/login/email:
    get:
      tags:
        - auth
      description: メールアドレスでログイン
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountInfo'
      servers:
        - url: 'https://localhost:3000/api'
  /auth/signup:
    post:
      tags:
        - auth
      description: Signup with chattool account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 株式会社テスト
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  cookie:
                    type: object
                    properties:
                      originalMaxAge:
                        type: integer
                        example: 1800000
                      expires:
                        type: string
                        example: '2023-10-08T16:31:05.647Z'
                      secure:
                        type: boolean
                        example: true
                      httpOnly:
                        type: boolean
                        example: true
                      path:
                        type: string
                        example: /
                      sameSite:
                        type: boolean
                        example: true
                  uid:
                    type: string
                    example: jj2BZVWDKiSUvMmOOZdJ9hlzPVk1
                  company:
                    type: object
                    properties:
                      id:
                        type: string
                        example: jj2BZVWDKiSUvMmOOZdJ9hlzPVk1
                      createdAt:
                        type: string
                        example: '2023-10-09T01:00:22.246Z'
                      updatedAt:
                        type: string
                        example: '2023-10-09T01:02:53.000Z'
                      deletedAt:
                        type: string
                        nullable: true
                        example: null
                      name:
                        type: string
                        example: test会社
                  registered:
                    type: boolean
                    example: true
      servers:
        - url: 'https://localhost:3000/api'
  /auth/signup/email:
    post:
      tags:
        - auth
      description: メールアドレスで新規登録
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  data:
                    type: object
                    example: null
                  message:
                    type: string
                    example: ''
      servers:
        - url: 'https://localhost:3000/api'
  /auth/logout:
    get:
      tags:
        - auth
      responses:
        '200':
          description: successful operation
      servers:
        - url: 'https://localhost:3000/api'
  /schedulers/update:
    get:
      tags:
        - shcedulers
      description: TODO
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  TODO:
                    type: string
                    example: TODO
      servers:
        - url: 'https://localhost:3000/api'
  /schedulers/prospect:
    get:
      tags:
        - shcedulers
      description: TODO
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  TODO:
                    type: string
                    example: TODO
      servers:
        - url: 'https://localhost:3000/api'
  /schedulers/remind:
    get:
      tags:
        - shcedulers
      description: TODO
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  TODO:
                    type: string
                    example: TODO
      servers:
        - url: 'https://localhost:3000/api'
  /backlog/install:
    get:
      tags:
        - backlog
      description: ...
      responses:
        '200':
          description: successful operation
          content:
            application/json: {}
      servers:
        - url: 'https://localhost:3000/api'
  /backlog/oauth_redirect:
    get:
      tags:
        - backlog
      description: ...
      responses:
        '200':
          description: successful operation
          content:
            application/json: {}
      servers:
        - url: 'https://localhost:3000/api'
  '/backlog/webhook/{companyId}':
    post:
      tags:
        - backlog
      responses:
        '200':
          description: successful operation
      servers:
        - url: 'https://localhost:3000/api'
  /slack/install:
    get:
      tags:
        - slack
      description: ...
      responses:
        '200':
          description: successful operation
          content:
            application/json: {}
      servers:
        - url: 'https://localhost:3000/api'
  /slack/oauth_redirect:
    get:
      tags:
        - slack
      description: ...
      responses:
        '200':
          description: successful operation
          content:
            application/json: {}
      servers:
        - url: 'https://localhost:3000/api'
  /slack/webhook:
    post:
      tags:
        - slack
      responses:
        '200':
          description: successful operation
      servers:
        - url: 'https://localhost:3000/api'
  /line-works/install:
    post:
      tags:
        - line-works
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                client_id:
                  type: string
                client_secret:
                  type: string
                service_account:
                  type: string
                secret_key:
                  type: string
              required:
                - client_id
                - client_secret
                - service_account
                - secret_key
              x-examples:
                Example 1:
                  client_id: 1234abcd1234abcd1234abcd
                  client_secret: 1234abcd
                  service_account: hoge.serviceaccount@hugahuga
                  secret_key: |-
                    -----BEGIN PRIVATE KEY-----
                    hogehogehoge...
                    -----END PRIVATE KEY-----
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  data:
                    type: object
                    properties:
                      companyId:
                        type: string
                      chatToolId:
                        type: integer
                      installation:
                        type: object
                        properties:
                          access_token:
                            type: string
                          refresh_token:
                            type: string
                          scope:
                            type: string
                          token_type:
                            type: string
                          expires_in:
                            type: string
                      accessToken:
                        type: string
                      refreshToken:
                        type: string
                      clientId:
                        type: string
                      clientSecret:
                        type: string
                      serviceAccount:
                        type: string
                      secretKey:
                        type: string
                      botId:
                        nullable: true
                      updatedAt:
                        nullable: true
                      deletedAt:
                        nullable: true
                      appTeamId:
                        nullable: true
                      appInstallUserId:
                        nullable: true
                  message:
                    type: string
                x-examples:
                  Example 1:
                    status: 200
                    data:
                      companyId: GanqoGQbsrWo4s3PJbCV4YnnMjf1
                      chatToolId: 3
                      installation:
                        access_token: jp1AAABRiMf01HFJjAzBTaJm2+yiG9g4iATNdgOrwv3ghV1Sbb3I0vn/0BbSAjEoc/8E4UFFH3zNweZdfxiVG4PufIa6khigOEaBO4Jp8Tf+aY8KsSzQtA2v4IYqllkS7eXPObKduHXGkquq8uYfKFnCa8KtadUkoQeFYOVo55wT1bBo9xXJyhwuP6hCwdrmBceLlMi6/olbt4bxzBMFEYC8iTytENXsn9EpJI4sXLiq+F6wFm8TYoUetvZR62AEV/PF5O3H2jmM8c0cPXAJvT9hEDxaXQS8us3+W2Bf71gidkS8y+FSYLAUbuLG0naJJBI1boYAK4I5kbknYm5Xum4iL86yYMTs/S2ma6OG63LvRVw9a3Felj/nHSzqFhwn9EJZPOK58gkowu63s9AhThSmeOK5EKwg8Zak84ZZwFgljaTCLkewFbexJNKo6/qdaBy//g/IA==.kwiu9yNovfcs8Rumz2QSOg
                        refresh_token: jp1AAAAhdcxpxhq8IEJOuZlEl7y7c499aeR/OMZWtglG5J0OTGGXqThP1JOufnff9i4odGgUr3ZnNg+M9dsp9yrL1nOqr0c14F6oiPL3tt1LdKrF8ZKQdEs3wmQJefETq7KZPQ3aqq2Dzb/mN3zbgq3tV3TOkfH2B8wNFIKf/+IFSZaiYpXga+329hRNKQqR/VPHH/rxQ==.kwiu9yNovfcs8Rumz2QSOg
                        scope: bot user.read group.read
                        token_type: Bearer
                        expires_in: '86400'
                      accessToken: jp1AAABRiMf01HFJjAzBTaJm2+yiG9g4iATNdgOrwv3ghV1Sbb3I0vn/0BbSAjEoc/8E4UFFH3zNweZdfxiVG4PufIa6khigOEaBO4Jp8Tf+aY8KsSzQtA2v4IYqllkS7eXPObKduHXGkquq8uYfKFnCa8KtadUkoQeFYOVo55wT1bBo9xXJyhwuP6hCwdrmBceLlMi6/olbt4bxzBMFEYC8iTytENXsn9EpJI4sXLiq+F6wFm8TYoUetvZR62AEV/PF5O3H2jmM8c0cPXAJvT9hEDxaXQS8us3+W2Bf71gidkS8y+FSYLAUbuLG0naJJBI1boYAK4I5kbknYm5Xum4iL86yYMTs/S2ma6OG63LvRVw9a3Felj/nHSzqFhwn9EJZPOK58gkowu63s9AhThSmeOK5EKwg8Zak84ZZwFgljaTCLkewFbexJNKo6/qdaBy//g/IA==.kwiu9yNovfcs8Rumz2QSOg
                      refreshToken: jp1AAAAhdcxpxhq8IEJOuZlEl7y7c499aeR/OMZWtglG5J0OTGGXqThP1JOufnff9i4odGgUr3ZnNg+M9dsp9yrL1nOqr0c14F6oiPL3tt1LdKrF8ZKQdEs3wmQJefETq7KZPQ3aqq2Dzb/mN3zbgq3tV3TOkfH2B8wNFIKf/+IFSZaiYpXga+329hRNKQqR/VPHH/rxQ==.kwiu9yNovfcs8Rumz2QSOg
                      clientId: Jxu4EyFVbENwDLe_BHjs
                      clientSecret: 9yEFsYmIE6
                      serviceAccount: bwtci.serviceaccount@yamaguchitest1com
                      secretKey: |-
                        -----BEGIN PRIVATE KEY-----
                        RsRfxjdufQ0tQA3b1v6TG1iS+UxNrsBL7Z0v49pU
                        oFzXEXBuS3IiMLdok5xBuD09eWgXacAayzOZEN92HydotgkbKM63Raudry4Z97q9
                        IaVErH6nmyc2OknN8ZU1HHFt0/qGxxlJ/i/A4ixYDXS4ivzvAgP6nJh20I0Vwzq4
                        tx3bq3IYwUsWobJkIGN5Gfuj
                        -----END PRIVATE KEY-----
                      botId: null
                      updatedAt: null
                      deletedAt: null
                      appTeamId: null
                      appInstallUserId: null
                    message: ''
              examples:
                Example 1:
                  value:
                    status: 200
                    data:
                      companyId: GanqoGQbsrWo4s3PJbCV4YnnMjf1
                      chatToolId: 3
                      installation:
                        access_token: jp1AAABRiMf01HFJjAzBTaJm2+yiG9g4iATNdgOrwv3ghV1Sbb3I0vn/0BbSAjEoc/8E4UFFH3zNweZdfxiVG4PufIa6khigOEaBO4Jp8Tf+aY8KsSzQtA2v4IYqllkS7eXPObKduHXGkquq8uYfKFnCa8KtadUkoQeFYOVo55wT1bBo9xXJyhwuP6hCwdrmBceLlMi6/olbt4bxzBMFEYC8iTytENXsn9EpJI4sXLiq+F6wFm8TYoUetvZR62AEV/PF5O3H2jmM8c0cPXAJvT9hEDxaXQS8us3+W2Bf71gidkS8y+FSYLAUbuLG0naJJBI1boYAK4I5kbknYm5Xum4iL86yYMTs/S2ma6OG63LvRVw9a3Felj/nHSzqFhwn9EJZPOK58gkowu63s9AhThSmeOK5EKwg8Zak84ZZwFgljaTCLkewFbexJNKo6/qdaBy//g/IA==.kwiu9yNovfcs8Rumz2QSOg
                        refresh_token: jp1AAAAhdcxpxhq8IEJOuZlEl7y7c499aeR/OMZWtglG5J0OTGGXqThP1JOufnff9i4odGgUr3ZnNg+M9dsp9yrL1nOqr0c14F6oiPL3tt1LdKrF8ZKQdEs3wmQJefETq7KZPQ3aqq2Dzb/mN3zbgq3tV3TOkfH2B8wNFIKf/+IFSZaiYpXga+329hRNKQqR/VPHH/rxQ==.kwiu9yNovfcs8Rumz2QSOg
                        scope: bot user.read group.read
                        token_type: Bearer
                        expires_in: '86400'
                      accessToken: jp1AAABRiMf01HFJjAzBTaJm2+yiG9g4iATNdgOrwv3ghV1Sbb3I0vn/0BbSAjEoc/8E4UFFH3zNweZdfxiVG4PufIa6khigOEaBO4Jp8Tf+aY8KsSzQtA2v4IYqllkS7eXPObKduHXGkquq8uYfKFnCa8KtadUkoQeFYOVo55wT1bBo9xXJyhwuP6hCwdrmBceLlMi6/olbt4bxzBMFEYC8iTytENXsn9EpJI4sXLiq+F6wFm8TYoUetvZR62AEV/PF5O3H2jmM8c0cPXAJvT9hEDxaXQS8us3+W2Bf71gidkS8y+FSYLAUbuLG0naJJBI1boYAK4I5kbknYm5Xum4iL86yYMTs/S2ma6OG63LvRVw9a3Felj/nHSzqFhwn9EJZPOK58gkowu63s9AhThSmeOK5EKwg8Zak84ZZwFgljaTCLkewFbexJNKo6/qdaBy//g/IA==.kwiu9yNovfcs8Rumz2QSOg
                      refreshToken: jp1AAAAhdcxpxhq8IEJOuZlEl7y7c499aeR/OMZWtglG5J0OTGGXqThP1JOufnff9i4odGgUr3ZnNg+M9dsp9yrL1nOqr0c14F6oiPL3tt1LdKrF8ZKQdEs3wmQJefETq7KZPQ3aqq2Dzb/mN3zbgq3tV3TOkfH2B8wNFIKf/+IFSZaiYpXga+329hRNKQqR/VPHH/rxQ==.kwiu9yNovfcs8Rumz2QSOg
                      clientId: Jxu4EyFVbENwDLe_BHjs
                      clientSecret: XXXYYYYZZZ
                      serviceAccount: bwtci.serviceaccount@hogehoge
                      secretKey: |-
                        -----BEGIN PRIVATE KEY-----
                        secretkey...
                        -----END PRIVATE KEY-----
                      botId: null
                      updatedAt: null
                      deletedAt: null
                      appTeamId: null
                      appInstallUserId: null
                    message: ''
      servers:
        - url: 'https://localhost:3000/api'
    patch:
      tags:
        - line-works
      description: TODO
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bot_id:
                  type: string
                bot_secret:
                  type: string
      responses:
        '204':
          description: edit ok
      servers:
        - url: 'https://localhost:3000/api'
  /notion/install:
    get:
      tags:
        - notion
      description: ...
      responses:
        '200':
          description: successful operation
          content:
            application/json: {}
      servers:
        - url: 'https://localhost:3000/api'
  /notion/oauth_redirect:
    get:
      tags:
        - notion
      description: ...
      responses:
        '200':
          description: successful operation
          content:
            application/json: {}
      servers:
        - url: 'https://localhost:3000/api'
  /google/install:
    get:
      tags:
        - google
      summary: ※※※未実装※※※
      description: ...
      responses:
        '200':
          description: successful operation
          content:
            application/json: {}
      servers:
        - url: 'https://localhost:3000/api'
  /google/oauth_redirect:
    get:
      tags:
        - google
      summary: ※※※未実装※※※
      description: ...
      responses:
        '200':
          description: successful operation
          content:
            application/json: {}
      servers:
        - url: 'https://localhost:3000/api'
  /plans:
    get:
      tags:
        - plans
      summary: ※※※未実装※※※
      responses:
        '200':
          description: successful operation
      servers:
        - url: 'https://localhost:3000/api'
  /subscriptions:
    get:
      tags:
        - subscriptions
      summary: ※※※未実装※※※
      description: ...
      responses:
        '200':
          description: successful operation
          content:
            application/json: {}
      servers:
        - url: 'https://localhost:3000/api'
    post:
      tags:
        - subscriptions
      summary: ※※※未実装※※※
      responses:
        '200':
          description: successful operation
      servers:
        - url: 'https://localhost:3000/api'
  /users:
    patch:
      tags:
        - users
      description: TODO
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                TODO:
                  type: string
                  example: TODO
      responses:
        '204':
          description: edit ok
      servers:
        - url: 'https://localhost:3000/api'
  '/users/{userId}':
    delete:
      tags:
        - users
      responses:
        '200':
          description: successful operation
      servers:
        - url: 'https://localhost:3000/api'
  /users/configs:
    get:
      tags:
        - users
      description: ...
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    user:
                      type: object
                      properties:
                        id:
                          type: string
                          example: 099dc433-2b96-4f63-aa46-5a5250fe92ec
                        name:
                          type: string
                          example: 山田太郎
                    chatToolUserId:
                      type: string
                      example: U01UA44GSMP
                    todoAppUserId:
                      type: string
                      example: 1a41faa9-d599-4b2a-b0c1-4cbfee2ccc48
      servers:
        - url: 'https://localhost:3000/api'
  /users/reporting-lines:
    get:
      tags:
        - users
      description: ...
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    user:
                      type: object
                      properties:
                        id:
                          type: string
                          example: 099dc433-2b96-4f63-aa46-5a5250fe92ec
                        name:
                          type: string
                          example: 山田太郎
                    superiorUsers:
                      type: array
                      items:
                        type: string
                        example: 099dc433-2b96-4f63-aa46-5a5250fe92ec
      servers:
        - url: 'https://localhost:3000/api'
  '/users/reporting-lines/{userId}':
    patch:
      tags:
        - users
      description: TODO
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                example: 099dc433-2b96-4f63-aa46-5a5250fe92ec
      responses:
        '204':
          description: edit ok
      servers:
        - url: 'https://localhost:3000/api'
  /chat-tool:
    get:
      tags:
        - chat-tool
      description: ...
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  chatToolId:
                    type: integer
                    example: 2
                  teamId:
                    type: string
                    example: T012B4YCASJ
      servers:
        - url: 'https://localhost:3000/api'
    delete:
      tags:
        - chat-tool
      summary: ※※※未実装※※※
      responses:
        '200':
          description: successful operation
      servers:
        - url: 'https://localhost:3000/api'
  '/chat-tool/{chatToolId}/accounts':
    get:
      tags:
        - chat-tool
      description: チャットツールのアカウント一覧を取得
      parameters:
        - $ref: '#/components/parameters/chatToolId'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChatToolAccount'
                  message:
                    type: string
                    example: ''
      servers:
        - url: 'https://localhost:3000/api'
  '/chat-tool/{chatToolId}/channels':
    get:
      tags:
        - chat-tool
      description: チャットツールのチャンネル一覧を取得
      parameters:
        - $ref: '#/components/parameters/chatToolId'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChatToolChannel'
                  message:
                    type: string
                    example: ''
      servers:
        - url: 'https://localhost:3000/api'
  '/chat-tool/{chatToolId}/channels/{channelId}':
    get:
      tags:
        - chat-tool
      description: Get detail channel information to verify correct channel id and botId
      parameters:
        - $ref: '#/components/parameters/chatToolId'
        - in: path
          name: channelId
          description: Channel Id
          required: true
          schema:
            type: number
            example: 2abcd
        - in: query
          name: botId
          description: Bot Id
          required: true
          schema:
            type: number
            example: 2000
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  data:
                    $ref: '#/components/schemas/ChatToolChannel'
                  message:
                    type: string
                    example: ''
        '500':
          description: Error when invalid channel id / bot id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorItem'
  '/chat-tool/{chatToolId}/bots':
    get:
      tags:
        - chat-tool
      description: Get list of bots
      parameters:
        - $ref: '#/components/parameters/chatToolId'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  data:
                    $ref: '#/components/schemas/SimpleItem'
                  message:
                    type: string
                    example: ''
      servers:
        - url: 'https://localhost:3000/api'
  '/chat-tool/{chatToolId}/users/{userId}':
    patch:
      tags:
        - chat-tool
      description: POPAIのユーザIDとチャットツールのユーザIDを紐付ける
      parameters:
        - $ref: '#/components/parameters/chatToolId'
        - $ref: '#/components/parameters/userId'
      requestBody:
        description: チャットツールのユーザIDを指定する。
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: U05Q99VUE13
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ''
      servers:
        - url: 'https://localhost:3000/api'
  /todo-app:
    get:
      tags:
        - todo-app
      description: ...
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  todoAppId:
                    type: integer
                    example: 3
                  workspaceId:
                    type: string
                    example: 25092ec8-384d-41f4-94ad-f423bd7b947f
      servers:
        - url: 'https://localhost:3000/api'
    delete:
      tags:
        - todo-app
      summary: ※※※未実装※※※
      description: ...
      responses:
        '200':
          description: successful operation
          content:
            application/json: {}
      servers:
        - url: 'https://localhost:3000/api'
  '/todo-app/{todoAppId}/accounts':
    get:
      tags:
        - todo-app
      description: TODO
      parameters:
        - $ref: '#/components/parameters/todoAppId'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: 1a41faa9-d599-4b2a-b0c1-4cbfee2ccc48
                    name:
                      type: string
                      example: 山田太郎
      servers:
        - url: 'https://localhost:3000/api'
  '/todo-app/{todoAppId}/boards':
    get:
      tags:
        - todo-app
      description: TODO
      parameters:
        - $ref: '#/components/parameters/todoAppId'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: 00bbebe6-7aae-4b34-ac9c-84f5af874d50
                    name:
                      type: string
                      example: プロジェクト
      servers:
        - url: 'https://localhost:3000/api'
  '/todo-app/{todoAppId}/boards/{boardId}/properties':
    get:
      tags:
        - todo-app
      description: TODO
      parameters:
        - $ref: '#/components/parameters/todoAppId'
        - $ref: '#/components/parameters/boardId'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: notion%3A%2F%2Ftasks%2Ftags_property
                    name:
                      type: string
                      example: ステータス
                    type:
                      type: integer
                      example: 4
                    availableOptions:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                            example: not-started
                          name:
                            type: string
                            example: 未着手
                          color:
                            type: string
                            example: default
      servers:
        - url: 'https://localhost:3000/api'
  '/todo-app/{todoAppId}/boards/{boardId}/usages':
    get:
      tags:
        - todo-app
      description: ...
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    property:
                      type: string
                      example: title
                    usage:
                      type: integer
                      example: 1
                    type:
                      type: integer
                      example: 1
                    options:
                      type: array
                      items:
                        type: string
                      example:
                        - done
                    isChecked:
                      type: boolean
                      example: null
                example:
                  - id: 1
                    property: title
                    usage: 1
                    type: 1
                    options: null
                    isChecked: null
                  - id: 2
                    property: notion%3A%2F%2Ftasks%2Fassign_property
                    usage: 3
                    type: 7
                    options: null
                    isChecked: null
                  - id: 3
                    property: notion%3A%2F%2Ftasks%2Fdue_date_property
                    usage: 4
                    type: 8
                    options: null
                    isChecked: null
                  - id: 4
                    property: notion%3A%2F%2Ftasks%2Fparent_task_relation
                    usage: 7
                    type: 15
                    options: null
                    isChecked: null
                  - id: 5
                    property: notion%3A%2F%2Ftasks%2Fstatus_property
                    usage: 5
                    type: 6
                    options:
                      - done
                    isChecked: null
                  - id: 6
                    property: notion%3A%2F%2Ftasks%2Fstatus_property
                    usage: 6
                    type: 6
                    options:
                      - archived
                    isChecked: null
              examples:
                default:
                  value:
                    - id: 1
                      property: title
                      usage: 1
                      type: 1
                      options: null
                      isChecked: null
                    - id: 2
                      property: notion%3A%2F%2Ftasks%2Fassign_property
                      usage: 3
                      type: 7
                      options: null
                      isChecked: null
                    - id: 3
                      property: notion%3A%2F%2Ftasks%2Fdue_date_property
                      usage: 4
                      type: 8
                      options: null
                      isChecked: null
                    - id: 4
                      property: notion%3A%2F%2Ftasks%2Fparent_task_relation
                      usage: 7
                      type: 15
                      options: null
                      isChecked: null
                    - id: 5
                      property: notion%3A%2F%2Ftasks%2Fstatus_property
                      usage: 5
                      type: 6
                      options:
                        - done
                      isChecked: null
                    - id: 6
                      property: notion%3A%2F%2Ftasks%2Fstatus_property
                      usage: 6
                      type: 6
                      options:
                        - archived
                      isChecked: null
      servers:
        - url: 'https://localhost:3000/api'
    patch:
      tags:
        - todo-app
      description: TODOアプリのデータ設定でカラムを更新するたび呼び出す
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  example: 1
                property:
                  type: string
                  example: title
                usage:
                  type: integer
                  example: 1
                type:
                  type: integer
                  example: 1
                options:
                  type: array
                  items:
                    type: string
                    example: archived
                isChecked:
                  type: boolean
                  example: null
      responses:
        '204':
          description: edit ok
      servers:
        - url: 'https://localhost:3000/api'
  '/todo-app/{todoAppId}/board':
    get:
      tags:
        - todo-app
      description: ...
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  boardId:
                    type: string
                    example: 00bbebe6-7aae-4b34-ac9c-84f5af874d50
                  projectRule:
                    type: string
                    example: null
      servers:
        - url: 'https://localhost:3000/api'
    post:
      tags:
        - todo-app
      description: リクエストの中身は空
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: successful operation
      servers:
        - url: 'https://localhost:3000/api'
    patch:
      tags:
        - todo-app
      description: TODO
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                boardId:
                  type: string
                  example: 00bbebe6-7aae-4b34-ac9c-84f5af874d50
                projectRule:
                  type: integer
                  example: 1
      responses:
        '204':
          description: edit ok
      servers:
        - url: 'https://localhost:3000/api'
  '/todo-app/{todoAppId}/users/{userId}':
    patch:
      tags:
        - todo-app
      description: TODO
      parameters:
        - $ref: '#/components/parameters/todoAppId'
        - $ref: '#/components/parameters/userId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: 1a41faa9-d599-4b2a-b0c1-4cbfee2ccc48
      responses:
        '204':
          description: edit ok
      servers:
        - url: 'https://localhost:3000/api'
  /config:
    get:
      tags:
        - config
      description: ...
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: boolean
                    example: false
                  todoApp:
                    type: boolean
                    example: true
                  projects:
                    type: object
                    properties:
                      enabled:
                        type: boolean
                        example: false
                      isValid:
                        type: boolean
                        example: false
                  todos:
                    type: object
                    properties:
                      enabled:
                        type: boolean
                        example: false
                      isValid:
                        type: boolean
                        example: false
      servers:
        - url: 'https://localhost:3000/api'
  /config/common:
    get:
      tags:
        - config
      description: ...
      responses:
        '200':
          description: successful operation
          content:
            application/json: {}
      servers:
        - url: 'https://localhost:3000/api'
    patch:
      tags:
        - config
      description: TODO
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                TODO:
                  type: string
                  example: TODO
      responses:
        '204':
          description: edit ok
      servers:
        - url: 'https://localhost:3000/api'
  /config/features:
    get:
      tags:
        - config
      description: ...
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  projects:
                    type: boolean
                    example: false
                  todos:
                    type: boolean
                    example: false
      servers:
        - url: 'https://localhost:3000/api'
  /config/prospect:
    get:
      tags:
        - config
      description: ...
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: integer
                    example: 2
                  enabled:
                    type: boolean
                    example: true
                  chatToolId:
                    nullable: true
                    example: null
                  channel:
                    nullable: true
                    example: null
                  from:
                    nullable: true
                    example: null
                  fromDaysBefore:
                    nullable: true
                    example: null
                  beginOfWeek:
                    nullable: true
                    example: null
                  to:
                    nullable: true
                    example: null
                  frequency:
                    nullable: true
                    example: null
                  frequencyDaysBefore:
                    nullable: true
                    example: null
                  timings:
                    type: array
                    example: []
      servers:
        - url: 'https://localhost:3000/api'
    patch:
      tags:
        - config
      description: TODO
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enabled:
                  type: boolean
                  example: true
                type:
                  type: integer
                  example: 2
                channel:
                  type: string
                  example: C01TRR9B9GE
                chatToolId:
                  type: integer
                  example: 2
                beginOfWeek:
                  type: integer
                  example: 1
                from:
                  type: integer
                  example: 1
                fromDaysBefore:
                  type: integer
                  example: 0
                to:
                  type: integer
                  example: 1
                frequency:
                  type: integer
                  example: 1
                frequencyDaysBefore:
                  type: array
                  items:
                    type: integer
                timings:
                  type: object
                  properties:
                    time:
                      type: string
                      example: '09:00:00'
                    type:
                      type: integer
                      example: 2
                    mode:
                      type: integer
                      example: 1
      responses:
        '204':
          description: edit ok
      servers:
        - url: 'https://localhost:3000/api'
  /config/remind:
    get:
      tags:
        - config
      description: ...
      responses:
        '200':
          description: successful operation
          content:
            application/json: {}
      servers:
        - url: 'https://localhost:3000/api'
    patch:
      tags:
        - config
      description: TODO
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                TODO:
                  type: string
                  example: TODO
      responses:
        '204':
          description: edit ok
      servers:
        - url: 'https://localhost:3000/api'
tags:
  - name: auth
  - name: config
  - name: users
  - name: chat-tool
  - name: todo-app
  - name: shcedulers
  - name: backlog
  - name: slack
  - name: line-works
  - name: notion
  - name: google
  - name: plans
  - name: subscriptions
components:
  parameters:
    companyId:
      name: companyId
      in: path
      required: true
      schema:
        type: string
    chatToolId:
      name: chatToolId
      in: path
      description: |
        チャットツールのID  
        LINE WORKS: 1  
        Slack: 2
      required: true
      schema:
        type: number
        example: 2
    todoAppId:
      name: todoAppId
      in: path
      description: ID of the todo app
      required: true
      schema:
        type: number
    userId:
      name: userId
      in: path
      description: POPAI上で管理しているユーザID
      required: true
      schema:
        type: string
        example: 9a7bbd68-509b-4e93-bd7d-0a68b412b8b4
    boardId:
      name: boardId
      in: path
      required: true
      schema:
        type: string
  schemas:
    AccountInfo:
      type: object
      properties:
        isRegistered:
          type: boolean
          example: true
        name:
          type: string
          example: 株式会社和平開発チーム
    ChatToolAccount:
      type: object
      properties:
        id:
          type: string
          example: U05Q99VUE13
        name:
          type: string
          example: 山田太郎
    ChatToolChannel:
      type: object
      properties:
        id:
          type: string
          example: C05QC7KP1JN
        name:
          type: string
          example: '# general'
    SimpleItem:
      type: object
      properties:
        id:
          type: string
          example: C05QC7KP1JN
        name:
          type: string
          example: '# general'
    ErrorItem:
      type: object
      properties:
        status:
          type: integer
          example: 500
        message:
          type: string
          example: "{\"code\":\"NOT_FOUND\",\"description\":\"Bot does not exist.\"}"
